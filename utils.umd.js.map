{"version":3,"file":"utils.umd.js","sources":["src/utils.js"],"sourcesContent":["import resolveTailwindConfig from 'tailwindcss/lib/util/resolveConfig.js'\nimport defaultTailwindConfig from 'tailwindcss/stubs/defaultConfig.stub.js'\nimport dlv from 'dlv'\n\nlet resolvedConfig\n\nexport function resolveConfig(config) {\n  if (resolvedConfig) return resolvedConfig\n  resolvedConfig = resolveTailwindConfig([config, defaultTailwindConfig])\n  return resolvedConfig\n}\n\nexport function stringifyScreen(config, screenName) {\n  let screen = dlv(config, ['theme', 'screens', screenName])\n  if (typeof screen === 'undefined') {\n    throw new Error(`Couldnâ€™t find Tailwind screen: ${screenName}`)\n  }\n  if (typeof screen === 'string') return `@media (min-width: ${screen})`\n  if (typeof screen.raw === 'string') {\n    return `@media ${screen.raw}`\n  }\n  let str = (Array.isArray(screen) ? screen : [screen])\n    .map(range => {\n      return [\n        typeof range.min === 'string' ? `(min-width: ${range.min})` : null,\n        typeof range.max === 'string' ? `(max-width: ${range.max})` : null\n      ]\n        .filter(Boolean)\n        .join(' and ')\n    })\n    .join(', ')\n  return str ? `@media ${str}` : ''\n}\n\nexport function resolveStyle(config, opts, key) {\n  for (let opt of opts) {\n    if (\n      [\n        'backgroundColor',\n        'borderColor',\n        'textColor',\n        'fill',\n        'stroke'\n      ].includes(opt.config)\n    ) {\n      let colors = flattenColors(dlv(config, ['theme', opt.config], {}))\n      if (typeof colors[key] !== 'undefined') {\n        return { [opt.prop]: colors[key] }\n      }\n    } else {\n      let value = dlv(config, ['theme', opt.config, key])\n      if (typeof value !== 'undefined') {\n        if (opt.config === 'fontFamily' && Array.isArray(value)) {\n          value = value.join(', ')\n        }\n        return { [opt.prop]: value }\n      }\n    }\n  }\n\n  return {}\n}\n\nfunction flattenColors(colors) {\n  let result = {}\n  for (let color in colors) {\n    if (colors[color] === Object(colors[color])) {\n      for (let key in colors[color]) {\n        let suffix = key === 'default' ? '' : `-${key}`\n        result[`${color}${suffix}`] = colors[color][key]\n      }\n    } else {\n      result[color] = colors[color]\n    }\n  }\n  return result\n}\n"],"names":["let","resolvedConfig","flattenColors","colors","result","color","Object","key","config","resolveTailwindConfig","defaultTailwindConfig","screenName","screen","dlv","Error","raw","str","Array","isArray","map","range","min","max","filter","Boolean","join","opts","opt","includes","prop","value"],"mappings":"kcAIAA,IAAIC,EA2DJ,SAASC,EAAcC,OACjBC,EAAS,OACRJ,IAAIK,KAASF,KACZA,EAAOE,KAAWC,OAAOH,EAAOE,QAC7BL,IAAIO,KAAOJ,EAAOE,GAErBD,EAAUC,GADW,YAARE,EAAoB,OAASA,IACZJ,EAAOE,GAAOE,QAG9CH,EAAOC,GAASF,EAAOE,UAGpBD,yJArEF,SAAuBI,UACxBP,IACJA,EAAiBQ,EAAsB,CAACD,EAAQE,wBAI3C,SAAyBF,EAAQG,OAClCC,EAASC,EAAIL,EAAQ,CAAC,QAAS,UAAWG,YACxB,IAAXC,QACH,IAAIE,wCAAwCH,MAE9B,iBAAXC,EAAqB,4BAA6BA,SACnC,iBAAfA,EAAOG,oBACCH,UAEfI,GAAOC,MAAMC,QAAQN,GAAUA,EAAS,CAACA,IAC1CO,aAAIC,SACI,CACgB,iBAAdA,EAAMC,mBAAkCD,UAAe,KACzC,iBAAdA,EAAME,mBAAkCF,UAAe,MAE7DG,OAAOC,SACPC,KAAK,WAETA,KAAK,aACDT,YAAgBA,EAAQ,mBAG1B,SAAsBR,EAAQkB,EAAMnB,qBACzBmB,kBAAM,CAAjB1B,IAAI2B,UAEL,CACE,kBACA,cACA,YACA,OACA,UACAC,SAASD,EAAInB,QACf,KACIL,EAASD,EAAcW,EAAIL,EAAQ,CAAC,QAASmB,EAAInB,QAAS,aACnC,IAAhBL,EAAOI,YACT,IAAGoB,EAAIE,MAAO1B,EAAOI,SAEzB,KACDuB,EAAQjB,EAAIL,EAAQ,CAAC,QAASmB,EAAInB,OAAQD,YACzB,IAAVuB,QACU,eAAfH,EAAInB,QAA2BS,MAAMC,QAAQY,KAC/CA,EAAQA,EAAML,KAAK,UAEd,IAAGE,EAAIE,MAAOC,WAKpB"}